{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","alt","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAUAA,IAASC,cAAc,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,8CAGX,IAAMC,EAAOR,IAASQ,OAEhBC,EAAYT,IAASS,YAY3B,SAASC,IAKL,OAAO,wBAAQC,QAJU,WACrB,IAAMC,EAAW,IAAIZ,IAASQ,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAElB,iCAGX,SAASG,IACL,OACIP,EAAKQ,aACD,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,sBAcZ,SAASC,IACL,IAAMC,EAAQC,mBAERC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IACrD,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBADc,EAGU3B,EAAKQ,YAAvBoB,EAHQ,EAGRA,IAAKC,EAHG,EAGHA,SAHG,SAKVhB,EAAYiB,IAAI,CAClBC,KAAMT,EACNU,UAAWxC,IAASS,UAAUgC,WAAWC,kBACzCN,MACAC,aATY,OAYhBN,EAAa,IACbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbzB,2CAAH,sDAgBjB,OACI,qCACI,iCACI,cAAC9B,EAAD,MAEJ,iCACKa,GACGA,EAASkB,KAAI,SAACC,GAAD,OACT,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAE9B,qBAAKC,IAAKhC,OAEd,uBAAMiC,SAAUpB,EAAhB,UACI,uBACIqB,MAAOvB,EACPwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,UAE3C,wBAAQG,KAAK,SAAb,0BAMhB,SAASR,EAAYS,GACjB,MAAgCA,EAAMR,QAA9BV,EAAR,EAAQA,KAAMH,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAEbqB,EAAetB,IAAQ5B,EAAKQ,YAAYoB,IAAM,OAAS,WAE7D,OACI,sBAAKuB,UAAS,kBAAaD,GAA3B,UACI,qBAAKE,IAAKvB,EAAUwB,IAAI,mBACxB,4BAAItB,OAKDuB,MA/Ff,WACI,MAAeC,YAAavD,GAArBwD,EAAP,oBAEA,OACI,qBAAKL,UAAU,MAAf,SACI,kCAAUK,EAAO,cAAC9C,EAAD,IAAe,cAACR,EAAD,SChB7BuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef1a2861.chunk.js","sourcesContent":["import './App.css';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\nimport { useState, useRef } from 'react';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { signOut } from '@firebase/auth';\n\nfirebase.initializeApp({\n    apiKey: 'AIzaSyD4KIc2J5ryOBFgVA1_vUU0zY1RwWkJ9Sk',\n    authDomain: 'my-firechat-63870.firebaseapp.com',\n    projectId: 'my-firechat-63870',\n    storageBucket: 'my-firechat-63870.appspot.com',\n    messagingSenderId: '662619388716',\n    appId: '1:662619388716:web:d78d5ec09ee82dba050a89',\n});\n\nconst auth = firebase.auth();\n\nconst firestore = firebase.firestore();\n\nfunction App() {\n    const [user] = useAuthState(auth);\n\n    return (\n        <div className=\"App\">\n            <section>{user ? <ChatRoom /> : <SignIn />}</section>\n        </div>\n    );\n}\n\nfunction SignIn() {\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider);\n    };\n    return <button onClick={signInWithGoogle}>Sign in with Google</button>;\n}\n\nfunction SignOut() {\n    return (\n        auth.currentUser && (\n            <button onClick={() => auth.signOut()}>Sign Out</button>\n        )\n    );\n}\n//bug: ClearCollection only works the first time, so I've removed it.\nfunction ClearCollection(path) {\n    const ref = firestore.collection(path);\n    ref.onSnapshot((snapshot) => {\n        snapshot.docs.forEach((doc) => {\n            ref.doc(doc.id).delete();\n        });\n    });\n}\n\nfunction ChatRoom() {\n    const dummy = useRef();\n\n    const messagesRef = firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt').limit(25);\n    const [messages] = useCollectionData(query, { idField: 'id' });\n    const [formValue, setFormValue] = useState('');\n\n    const sendMessage = async (e) => {\n        e.preventDefault();\n\n        const { uid, photoURL } = auth.currentUser;\n\n        await messagesRef.add({\n            text: formValue,\n            createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n            uid,\n            photoURL,\n        });\n\n        setFormValue('');\n        dummy.current.scrollIntoView({ behavior: 'smooth' });\n    };\n\n    return (\n        <>\n            <header>\n                <SignOut />\n            </header>\n            <main>\n                {messages &&\n                    messages.map((msg) => (\n                        <ChatMessage key={msg.id} message={msg} />\n                    ))}\n                <div ref={dummy}></div>\n            </main>\n            <form onSubmit={sendMessage}>\n                <input\n                    value={formValue}\n                    onChange={(e) => setFormValue(e.target.value)}\n                />\n                <button type=\"submit\">submit</button>\n            </form>\n        </>\n    );\n}\n\nfunction ChatMessage(props) {\n    const { text, uid, photoURL } = props.message;\n\n    const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n    return (\n        <div className={`message ${messageClass}`}>\n            <img src={photoURL} alt=\"this is a user\" />\n            <p>{text}</p>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}